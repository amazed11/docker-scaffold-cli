# deploy.yml
# Generated by Docker Scaffold CLI
# This file defines the GitHub Actions workflow for deploying your application.

name: Deploy to <%- deploymentTarget.toUpperCase() %>

on:
  push:
    branches: [ <%- mainBranch %> ]
  pull_request:
    branches: [ <%- mainBranch %> ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      <% if (useDockerRegistry && dockerRegistry === 'dockerhub') { %>
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      <% } else if (useDockerRegistry && dockerRegistry === 'other') { %>
      - name: Login to custom registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      <% } %>

      - name: Build<% if (useDockerRegistry) { %> and push<% } %> Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          <% if (useDockerRegistry) { %>
          push: ${{ github.event_name != 'pull_request' }}
          <% } else { %>
          push: false
          load: true
          <% } %>
          <% if (useDockerRegistry && dockerRegistry === 'dockerhub') { %>
          tags: <%- dockerUsername %>/<%- projectName %>:latest
          <% } else if (useDockerRegistry && dockerRegistry === 'other') { %>
          tags: ${{ secrets.REGISTRY_URL }}/<%- projectName %>:latest
          <% } else { %>
          tags: <%- projectName %>:latest
          <% } %>

      <% if (deploymentTarget) { %>
      - name: Deploy to <%- deploymentTarget.toUpperCase() %>
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/<%- mainBranch %>'
        <% if (deploymentTarget === 'aws') { %>
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || "<%- awsRegion %>" }}

      - name: Deploy container to AWS
        run: |
          echo "Deploying to AWS"
          aws ecs update-service \
            --cluster <%- awsCluster %> \
            --service <%- projectName %>-service \
            --force-new-deployment

        <% } else if (deploymentTarget === 'azure') { %>
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy container to Azure
        run: |
          echo "Deploying to Azure"
          <% if (useDockerRegistry && dockerRegistry === 'dockerhub') { %>
          az webapp config container set \
            --name <%- projectName %> \
            --resource-group <%- azureResourceGroup %> \
            --docker-custom-image-name <%- dockerUsername %>/<%- projectName %>:latest
          <% } else if (useDockerRegistry && dockerRegistry === 'other') { %>
          az webapp config container set \
            --name <%- projectName %> \
            --resource-group <%- azureResourceGroup %> \
            --docker-custom-image-name ${{ secrets.REGISTRY_URL }}/<%- projectName %>:latest
          <% } else { %>
          az webapp config container set \
            --name <%- projectName %> \
            --resource-group <%- azureResourceGroup %> \
            --docker-custom-image-name <%- projectName %>:latest
          <% } %>

        <% } else if (deploymentTarget === 'vps' || deploymentTarget === 'digitalocean' || deploymentTarget === 'other') { %>
        run: |
          echo "Deploying to <%- deploymentTarget.toUpperCase() %> via SSH"
          apt-get update && apt-get install -y openssh-client
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H <%- sshHost %> >> ~/.ssh/known_hosts
          ssh <%- sshUser %>@<%- sshHost %> "
            cd <%- sshPath %> &&
            <% if (useDockerRegistry) { %>docker-compose pull && <% } %>
            docker-compose up -d --force-recreate &&
            docker system prune -f
          "

        <% } else if (deploymentTarget === 'local') { %>
        run: |
          echo "Deploying locally"
          <% if (useDockerRegistry) { %>docker-compose pull<% } %>
          docker-compose up -d --force-recreate
          docker system prune -f

        <% } else if (deploymentTarget === 'ec2') { %>
        - name: Add EC2 SSH key
          uses: webfactory/ssh-agent@v0.7.0
          with:
            ssh-private-key: ${{ secrets.<%- ec2SshKeyName %> }}

        - name: Clone repository to EC2 or Pull changes if already cloned
          if: github.event_name != 'pull_request' && github.ref == 'refs/heads/<%- mainBranch %>'
          run: |
            ssh -o StrictHostKeyChecking=no <%- ec2User %>@${{ secrets.<%- ec2Host.toUpperCase().replace(/[^A-Z0-9_]/g, '_') %> || '<%- ec2Host %>' }} << 'EOF'
              if [ ! -d "<%- ec2RepoPath %>/.git" ]; then
                mkdir -p "$(dirname "<%- ec2RepoPath %>")"
                git clone -b <%- ec2RepoBranch %> <%- ec2RepoUrl %> <%- ec2RepoPath %>
              else
                cd <%- ec2RepoPath %>
                git reset --hard
                git pull --rebase origin <%- ec2RepoBranch %>
              fi
            EOF

        - name: Build and deploy on EC2
          if: github.event_name != 'pull_request' && github.ref == 'refs/heads/<%- mainBranch %>'
          run: |
            ssh -o StrictHostKeyChecking=no <%- ec2User %>@${{ secrets.<%- ec2Host.toUpperCase().replace(/[^A-Z0-9_]/g, '_') %> || '<%- ec2Host %>' }} << 'EOF'
              cd <%- ec2RepoPath %>
              <%- ec2BuildCommand %>
              <% if (ec2UseCustomContainer) { %>
              rm -rf <%- ec2LocalPath %>
              mkdir -p <%- ec2LocalPath %>
              CONTAINER_ID=$(docker ps -q --filter "name=<%- projectName %>")
              docker cp $CONTAINER_ID:<%- ec2ContainerPath %>/. <%- ec2LocalPath %>/
              echo "Files copied from container to <%- ec2LocalPath %>/"
              <% } %>
              echo "Deployment completed successfully at $(date)"
            EOF

        <% } else { %>
        run: |
          echo "Deploying to <%- deploymentTarget %>"
          # Add your custom deployment commands here
        <% } %>
      <% } %>